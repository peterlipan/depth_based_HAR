import os
import pandas as pd


def check_split(train_df, test_df):
    """
    To check if there exists data leakage.
    """
    assert all(item is False for item in train_df.duplicated()), \
        'Duplication in the train set'
    assert all(item is False for item in test_df.duplicated()), \
        'Duplication in the test set'
    temp_df = pd.concat([train_df, test_df], ignore_index=True)
    assert all(item is False for item in temp_df.duplicated()), \
        'Data leakage'


def summarize_dataset(data_root):
    """
    To generate the csv file logging info of the whole NTU RGB-D dataset.
    :param data_root: path to the folder containing the folders of videos.
    :return: df: pandas.DataFrame containing the info of each video fragment.
    """
    filenames = os.listdir(data_root)
    view_list = [int(item[1:4]) for item in filenames]
    cam_list = [int(item[5:8]) for item in filenames]
    sub_list = [int(item[9:12]) for item in filenames]
    repeat_list = [int(item[13:16]) for item in filenames]
    act_list = [int(item[17:]) for item in filenames]
    frame_list = [len(os.listdir(os.path.join(data_root, item))) for item in filenames]
    df = pd.DataFrame({"filename": filenames, "view_id": view_list, "camera_id": cam_list,
                       "subject_id": sub_list, "repeat_id": repeat_list, "action_id": act_list,
                       "frame_num": frame_list})
    return df


def cross_eva_split(log_file):
    """
    To split the dataset by the subject ID (or Camera ID) to evaluate the cross-subject (or cross-view) performance.
    We follow https://arxiv.org/abs/1802.07898 to select the subjects for training.
    and follow https://arxiv.org/abs/2104.13586 to select the cameras for training.
    :param log_file: pandas.DataFrame generated by summarize_dataset().
    :return:
    """
    # cross-subject
    sub_set = set(log_file['subject_id'])
    xsub_train_ids = [1, 2, 4, 5, 8, 9, 13, 14, 15, 16,
                      17, 18, 19, 25, 27, 28, 31, 34, 35, 38]
    xsub_test_ids = [idx for idx in set(sub_set) if idx not in xsub_train_ids]
    xsub_train_df = log_file[log_file['subject_id'].isin(xsub_train_ids)].reset_index(drop=True)
    xsub_test_df = log_file[log_file['subject_id'].isin(xsub_test_ids)].reset_index(drop=True)
    check_split(xsub_train_df, xsub_test_df)

    # cross-view
    xview_train_ids = [2, 3]
    xview_test_ids = [1]
    xview_train_df = log_file[log_file['camera_id'].isin(xview_train_ids)].reset_index(drop=True)
    xview_test_df = log_file[log_file['camera_id'].isin(xview_test_ids)].reset_index(drop=True)
    check_split(xview_train_df, xview_test_df)

    return xsub_train_df, xview_train_df, xsub_test_df, xview_test_df


if __name__ == '__main__':
    root = "/mnt/ssd/li/NTU_RGBD_60/nturgb+d_depth_masked"
    split_root = '../split/NTU_RGBD_60'
    if not os.path.exists(split_root):
        os.makedirs(split_root)

    ntu_info = summarize_dataset(root)
    ntu_info.to_csv(os.path.join(split_root, "NTU_RGBD_60_overall.csv"), index=False)

    cs_train, cv_train, cs_test, cv_test = cross_eva_split(ntu_info)
    cs_train.to_csv(os.path.join(split_root, "cs_train.csv"), index=False)
    cs_test.to_csv(os.path.join(split_root, "cs_test.csv"), index=False)

    cv_train.to_csv(os.path.join(split_root, "cv_train.csv"), index=False)
    cv_test.to_csv(os.path.join(split_root, "cv_test.csv"), index=False)
